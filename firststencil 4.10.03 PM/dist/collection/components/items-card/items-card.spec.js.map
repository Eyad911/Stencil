{"version":3,"file":"items-card.spec.js","sourceRoot":"","sources":["../../../src/components/items-card/items-card.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { ItemsCard } from './items-card';\nimport { Item } from './item';\n\n// Sample data for testing\nconst sampleArrayData: Item[] = [\n  {\n    id:'1',\n    thumbnail: 'https://via.placeholder.com/45',\n    label: 'Item 1',\n    price: {\n      currency: 'USD',\n      amount: 12.5,\n    },\n    qty: 2,\n  },\n  {\n    id:'2',\n    thumbnail: 'https://via.placeholder.com/45',\n    label: 'Item 2',\n    price: {\n      currency: 'USD',\n      amount: 23.99,\n    },\n    qty: 1,\n  },\n];\n\ndescribe('ey-items-card', () => {\n  // This test verifies that the component renders correctly when arrayData is passed as an array of objects\n  it('should render correctly with arrayData as an object', async () => {\n    const page = await newSpecPage({\n      components: [ItemsCard],\n      html: `<ey-items-card></ey-items-card>`,\n    });\n\n    page.root.arrayData = sampleArrayData;\n    await page.waitForChanges();\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n\n  // This test checks that the component renders correctly when arrayData is provided as a JSON string.\n  it('should render correctly with arrayData as a string', async () => {\n    const page = await newSpecPage({\n      components: [ItemsCard],\n      html: `<ey-items-card></ey-items-card>`,\n    });\n\n    page.root.arrayData = JSON.stringify(sampleArrayData);\n    await page.waitForChanges();\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n\n  // This test ensures that the component correctly parses arrayData when it is provided as a JSON string.\n  it('should parse arrayData correctly when passed as a string', async () => {\n    const page = await newSpecPage({\n      components: [ItemsCard],\n      html: `<ey-items-card></ey-items-card>`,\n    });\n\n    page.root.arrayData = JSON.stringify(sampleArrayData);\n    await page.waitForChanges();\n\n    expect(page.rootInstance['_arrayData']).toEqual(sampleArrayData);\n  });\n\n \n\n  // This test verifies that the component handles invalid JSON strings gracefully by not crashing and instead setting _arrayData to an empty array.\n  it('should handle invalid JSON string gracefully', async () => {\n    const page = await newSpecPage({\n      components: [ItemsCard],\n      html: `<ey-items-card></ey-items-card>`,\n    });\n\n    page.root.arrayData = 'invalid JSON string';\n    await page.waitForChanges();\n\n    expect(page.rootInstance['_arrayData']).toEqual([]);\n  });\n\n\n  // This test ensures that the component handles arrayData being undefined gracefully by not crashing and instead setting _arrayData to an empty array.\n  it('should handle undefined arrayData gracefully', async () => {\n    const page = await newSpecPage({\n      components: [ItemsCard],\n      html: `<ey-items-card></ey-items-card>`,\n    });\n\n    page.root.arrayData = undefined;\n    await page.waitForChanges();\n\n    expect(page.rootInstance['_arrayData']).toEqual([]);\n  });\n});\n"]}